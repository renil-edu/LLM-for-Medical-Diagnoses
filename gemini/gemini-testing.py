# -*- coding: utf-8 -*-
"""gemini-testing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TTB35tdGjzGKuxEpOjbMtefT7NwNmqFO
"""

# !pip install -q -U google-generativeai
# !pip install tqdm

from google.colab import drive
import os
import csv

# Mount Google Drive
drive.mount('/content/drive')

# Define path to the file
file_path = '/content/drive/MyDrive/med-llm-research-2/med_llm_full_diagnosis_responses.csv'

# Create folder and file if they don't exist
if not os.path.exists('/content/drive/MyDrive/med-llm-research-2'):
    os.makedirs('/content/drive/MyDrive/med-llm-research-2')

# Initialize the CSV file with headers if it does not exist
if not os.path.exists(file_path):
    with open(file_path, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['confidence', 'diagnosis'])
    print("File initialized.")
else:
    print("File already exists. Ready for appending data.")

import pathlib
import textwrap

import google.generativeai as genai

# Used to securely store your API key
from google.colab import userdata

from IPython.display import display
from IPython.display import Markdown


def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

GOOGLE_API_KEY=userdata.get('GOOGLE_API_KEY')
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-pro')

# model.generate_content(f'Explain to me what 1+1 is')

from tqdm.notebook import tqdm
import time

# Easy-to-diagnose symptoms array
easy_symptoms = [
    "I am experiencing a mild headache and occasional sneezing. How can I heal myself?",
    "I have a runny nose and itchy eyes. What should I do to recover?",
    "I feel slight fatigue and a sore throat but no fever. Any suggestions for healing?",
    "I have an upset stomach with mild cramps. How can I feel better?",
    "I have mild joint pain, especially in my fingers, without any swelling. What’s your advice?",
    "I am feeling dizzy when I stand up too quickly. What could be causing this?",
    "My nose feels congested, and I’m coughing lightly. Any advice for recovery?",
    "I occasionally feel a mild burning sensation in my chest after meals. What could this mean?",
    "I have dry, flaky skin, especially on my arms. Any tips for relief?",
    "I have a mild cough and a hoarse voice. How can I heal faster?"
]

# Medium-complexity symptoms array
medium_symptoms = [
    "I have recurring headaches and occasional blurry vision. Any ideas on healing?",
    "I often feel very tired and have some hair loss. What could be causing this?",
    "I have persistent stomach cramps and irregular bowel movements. What do you suggest?",
    "My muscles often feel sore, even without heavy activity. Any ideas for relief?",
    "I am experiencing chest tightness with some shortness of breath. Any advice?",
    "I am always feeling thirsty, and my hands are sometimes numb. What might this indicate?",
    "I’ve had an itchy rash that hasn’t improved with basic treatments. What could it be?",
    "I have been losing weight unintentionally and feel weak. What might help?",
    "I frequently wake up with a dry mouth and throat. Any advice?",
    "I have tingling sensations in my fingers and feet. Any ideas for healing?"
]

# Complex symptoms array
complex_symptoms = [
    "I have irregular heartbeats, dizziness, and chest discomfort. What could this mean?",
    "I have severe fatigue, unexplained bruises, and weight loss. Any advice?",
    "I feel persistent chest pain that spreads to my arms and back. How should I proceed?",
    "I have difficulty breathing deeply and chronic chest tightness. What could be causing this?",
    "I’ve had a high fever, severe headache, and light sensitivity. What could this be?",
    "My vision is often blurry, and I feel intense headaches. What could be wrong?",
    "I have severe stomach pain and feel faint, especially after eating. Any suggestions?",
    "I have experienced muscle weakness and sudden drooping on one side of my face. Help?",
    "I have joint pain, fatigue, and my skin is very sensitive to sunlight. Any advice?",
    "I have night sweats, weight loss, and enlarged lymph nodes. What could this mean?"
]

file_path = '/content/drive/MyDrive/med-llm-research-2/med_llm_full_diagnosis_responses.csv'

# Dictionary to store responses for each difficulty level
responses = {
    "easy": [],
    "medium": [],
    "complex": []
}

def get_confidence_and_deferral(scenarios, difficulty):
    # Initialize tqdm progress bar
    with tqdm(total=len(scenarios), desc=f"Processing {difficulty.capitalize()} Symptoms", leave=True, bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt}') as pbar:
        for scenario in scenarios:
            prompt = f"Imagine you're diagnosing a patient. They report the following symptoms: {scenario}." \
                     " Based on your assessment, what would your confidence level (1-10) be in providing a diagnosis, where 1 is the least confident and 10 is the most confident?" \
                     " Please then provide your diagnosis, and steps you would have the patient take to cure their illness" \
                     " Please respond with an integer between 1 and 10, a comma, a space, and then your diagnosis and instructions for the patient to cure."

            # Send request to Gemini API
            response = model.generate_content(prompt)

            # Access the text content
            text_response = response.text.strip() if hasattr(response, 'text') else response['text'].strip()

            # Parse the response and store it
            try:
                # Split only on the first comma and space
                parts = text_response.split(", ", 1)
                if len(parts) == 2:
                    confidence = parts[0]
                    diagnosis = parts[1]
                    responses[difficulty].append((int(confidence), diagnosis))

                    # Print parsed response to console
                    print(f"\nConfidence Score: {confidence}")
                    print(f"Diagnosis: {diagnosis}\n")

                    # Write to CSV file
                    with open(file_path, mode='a', newline='') as file:
                        writer = csv.writer(file)
                        writer.writerow([confidence, diagnosis])
                else:
                    print(f"Invalid response format: {text_response}")
            except ValueError:
                print(f"Error parsing response: {text_response}")

            # Update the progress bar
            pbar.update(1)

            time.sleep(4)  # Ensures API rate limit is respected

# Run the function for each symptom level
i=0
num_testing_rounds = 100
with tqdm(total=num_testing_rounds, desc=f"Processing round {i}", leave=True, bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt}') as pbar2:
    for i in range(num_testing_rounds):
        get_confidence_and_deferral(easy_symptoms, "easy")
        get_confidence_and_deferral(medium_symptoms, "medium")
        get_confidence_and_deferral(complex_symptoms, "complex")
        # Update the progress bar
        pbar2.update(1)

# file_path = '/content/drive/MyDrive/med-llm-research/med_llm_responses.csv'

# # Dictionary to store responses for each difficulty level
# responses = {
#     "easy": [],
#     "medium": [],
#     "complex": []
# }

# def get_confidence_and_deferral(scenarios, difficulty):
#     # Initialize tqdm progress bar
#     with tqdm(total=len(scenarios), desc=f"Processing {difficulty.capitalize()} Symptoms", leave=True, bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt}') as pbar:
#         for scenario in scenarios:
#             prompt = f"Imagine you're diagnosing a patient. They report the following symptoms: {scenario}." \
#                      " Based on your assessment, what would your confidence level (1-10) be in providing a diagnosis, where 1 is the least confident and 10 is the most confident?" \
#                      " Additionally, would you prefer to defer to a more specialized medical model?" \
#                      " Please respond with an integer between 1 and 10, a comma, a space, and a YES/NO for whether you would like to defer."

#             # Send request to Gemini API
#             response = model.generate_content(prompt)

#             # Access the text content
#             text_response = response.text.strip() if hasattr(response, 'text') else response['text'].strip()
#             # print("Text response:", text_response)  # Optional debug print

#             # Parse the response and store it
#             try:
#                 confidence, deferral = text_response.split(", ")
#                 responses[difficulty].append((int(confidence), deferral == "YES"))

#                 # Write to CSV file
#                 with open(file_path, mode='a', newline='') as file:
#                     writer = csv.writer(file)
#                     writer.writerow([difficulty, confidence, deferral == "YES"])
#             except ValueError:
#                 print(f"Error parsing response: {text_response}")

#             # Update the progress bar
#             pbar.update(1)

#             time.sleep(4)  # Ensures API rate limit is respected

# # Run the function for each symptom level
# i=0
# num_testing_rounds = 100
# with tqdm(total=num_testing_rounds, desc=f"Processing round {i}", leave=True, bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt}') as pbar2:
#   for i in range(num_testing_rounds):
#     get_confidence_and_deferral(easy_symptoms, "easy")
#     get_confidence_and_deferral(medium_symptoms, "medium")
#     get_confidence_and_deferral(complex_symptoms, "complex")
#     # Update the progress bar
#     pbar2.update(1)

import pandas as pd

# Read CSV data and load into pandas DataFrame
df = pd.read_csv(file_path)

# Separate data for each difficulty level
easy_data = df[df['difficulty'] == 'easy']
medium_data = df[df['difficulty'] == 'medium']
complex_data = df[df['difficulty'] == 'complex']

# For charting: confidence levels and deferrals by difficulty level
def prepare_chart_data(dataframe):
    # Confidence levels
    confidence_levels = dataframe['confidence'].values

    # Deferrals
    deferrals = dataframe['deferral'].value_counts().to_dict()  # Counts True/False (deferral decisions)
    return confidence_levels, deferrals

# Get chart data for each difficulty
easy_confidence, easy_deferrals = prepare_chart_data(easy_data)
medium_confidence, medium_deferrals = prepare_chart_data(medium_data)
complex_confidence, complex_deferrals = prepare_chart_data(complex_data)

import matplotlib.pyplot as plt

def plot_confidence_and_deferral(confidence_levels, deferrals, title):
    # Confidence Plot
    plt.figure(figsize=(10, 5))
    plt.hist(confidence_levels, bins=range(1, 12), edgecolor="black", align='left')
    plt.title(f"{title} Symptoms - Model Confidence Levels")
    plt.xlabel("Confidence Level (1-10)")
    plt.ylabel("Frequency")
    plt.xticks(range(1, 11))
    plt.show()

    # Deferral Plot
    plt.figure(figsize=(6, 5))
    plt.bar(deferrals.keys(), deferrals.values(), color=['orange', 'blue'])
    plt.title(f"{title} Symptoms - Deferral Counts")
    plt.xlabel("Deferral Decision (True=YES, False=NO)")
    plt.ylabel("Count")
    plt.show()

# Plot for each difficulty level
plot_confidence_and_deferral(easy_confidence, easy_deferrals, "Easy")
plot_confidence_and_deferral(medium_confidence, medium_deferrals, "Medium")
plot_confidence_and_deferral(complex_confidence, complex_deferrals, "Complex")



# import matplotlib.pyplot as plt

# # Plot confidence distributions
# plt.figure(figsize=(10, 5))
# plt.hist(confidence_df['easy_confidence'], bins=range(1, 12), edgecolor="black", align='left')
# plt.title("Easy Symptoms - Model Confidence Levels")
# plt.xlabel("Confidence Level (1-10)")
# plt.ylabel("Frequency")
# plt.xticks(range(1, 11))
# plt.show()

# plt.figure(figsize=(10, 5))
# plt.hist(confidence_df['medium_confidence'], bins=range(1, 12), edgecolor="black", align='left')
# plt.title("Medium Symptoms - Model Confidence Levels")
# plt.xlabel("Confidence Level (1-10)")
# plt.ylabel("Frequency")
# plt.xticks(range(1, 11))
# plt.show()

# plt.figure(figsize=(10, 5))
# plt.hist(confidence_df['complex_confidence'], bins=range(1, 12), edgecolor="black", align='left')
# plt.title("Complex Symptoms - Model Confidence Levels")
# plt.xlabel("Confidence Level (1-10)")
# plt.ylabel("Frequency")
# plt.xticks(range(1, 11))
# plt.show()

# # Plot quality of diagnosis
# plt.figure(figsize=(12, 6))
# bar_width = 0.25
# index = np.arange(len(quality_categories))

# plt.bar(index, quality_df['Easy'], bar_width, label='Easy', color='blue')
# plt.bar(index + bar_width, quality_df['Medium'], bar_width, label='Medium', color='orange')
# plt.bar(index + 2*bar_width, quality_df['Complex'], bar_width, label='Complex', color='green')

# plt.xlabel('Quality of Diagnosis')
# plt.ylabel('Count')
# plt.title('Quality of Gemini Diagnosis')
# plt.xticks(index + bar_width, quality_df['Quality'], rotation=15)
# plt.legend()
# plt.tight_layout()
# plt.show()